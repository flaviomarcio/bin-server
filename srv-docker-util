#!/bin/bash

. ${BIN_SRV_LIB_PATH}/envs
. ${BIN_SRV_LIB_PATH}/srv-lib-string.sh
. ${BIN_SRV_LIB_PATH}/srv-storage.sh

export BIN_SRV_DOCKER_

function dckInspectBackup()
{
  echM "Docker inspect backup"
  local __services=($(docker service ls --quiet))
  local __date=$(date -u +"%Y-%m-%dT%H:%M:%SZ" | sed 's/\-/\./g' | sed 's/:/\./g')
  local __dir_inpect_backup=${BIN_SRV_DOCKER_BACKUP}/inspect
  local __dir_inpect_backup_final=${__dir_inpect_backup}/${__date}
  local __service_id=
  for __service_id in "${__services[@]}"
  do
    local __server_name="$(docker service inspect ${__service_id} | jq '.[].Spec.Name' | sed 's/\"//g')"
    echB "  - ${__server_name}:"
    echC "    - inspect: ${COLOR_YELLOW}"
   
    local __file_src="${__dir_inpect_backup}/${__server_name}.json"
    local __file_src_env="${__dir_inpect_backup}/${__server_name}-env.json"    
    local __file_final="${__dir_inpect_backup_final}/${__server_name}.json"
    local __file_final_env="${__dir_inpect_backup_final}/${__server_name}-env.json"

    echC "      - full: ${COLOR_YELLOW}${__file_src}"
    echC "      - envs: ${COLOR_YELLOW}${__file_src_env}"
    docker service inspect ${__service_id} | jq > ${__file_src}
    cat ${__file_src} | jq '.[].Spec.TaskTemplate.ContainerSpec.Env' > ${__file_src_env}

    mkdir -p ${__dir_inpect_backup_final}
    cat ${__file_src}>${__file_final}
    cat ${__file_src_env}>${__file_final_env}
    echB "    - history: ${COLOR_YELLOW}"
    echC "      - full: ${COLOR_YELLOW}${__file_final}"
    echC "      - envs: ${COLOR_YELLOW}${__file_final_env}"
  done

}


function mainMenuExec()
{
  local __action=${1}
  if [[ ${__action} == "--dck-inspect-backup" ]]; then
    dckInspectBackup
  fi
}

function mainMenu()
{
  echM $'\n'"Server utils"$'\n'
  PS3=$'\n'"Selecione uma opção: "
  
  local __options=(DCK-Inspect-Backup)
  local __opt=
  select __opt in "${__options[@]}"
  do
    echM ""
    echM "Starting ${__opt}"
    case ${__opt} in
        "DCK-Inspect-Backup")
          dckInspectBackup
          return 1
            ;;
        "quit")
          exit 0
            ;;
        *) echo "invalid option ${__opt}";
    esac
  done
  return 1
}

function mainInit()
{
  unset __func_return
  storageMaker
  if ! [ "$?" -eq 1 ]; then
    echR "Failt on calling storageMaker: ${__func_return}"
    return 0
  fi
  return 1
}


function mainRunner()
{
  while :
  do
    mainInit
    if ! [ "$?" -eq 1 ]; then
      echR "Failt on calling storageMaker: ${__func_return}"
      exit 0
    fi
    clearTerm
    osInformationPrint
    mainMenu
    echG ""
    echG "[ENTER para continuar]"
    read
  done
}

mainMenu